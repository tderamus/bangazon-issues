// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace bangazon_issues.Migrations
{
    [DbContext(typeof(BangazonDbContext))]
    [Migration("20250315065335_RestoreProductClassAttribute")]
    partial class RestoreProductClassAttribute
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("bangazon_issues.Models.AccountType", b =>
                {
                    b.Property<string>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("TypeAcct")
                        .HasColumnType("integer");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountType");

                    b.HasData(
                        new
                        {
                            AccountTypeId = "018465ba-c6df-4d4c-9d57-2c7974b57a86",
                            TypeAcct = 2
                        },
                        new
                        {
                            AccountTypeId = "ba775162-12ca-4f33-830c-fb968ccba1ef",
                            TypeAcct = 1
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.CustomerOrders", b =>
                {
                    b.Property<string>("CustomerOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CustomerUid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrdersId")
                        .HasColumnType("text");

                    b.Property<string>("SellerId")
                        .HasColumnType("text");

                    b.HasKey("CustomerOrderId");

                    b.HasIndex("CustomerUid")
                        .IsUnique();

                    b.HasIndex("OrdersId");

                    b.HasIndex("SellerId");

                    b.ToTable("CustomersOrders");

                    b.HasData(
                        new
                        {
                            CustomerOrderId = "c5115502-5842-4612-aabc-f156e79cbad6",
                            CustomerUid = "1"
                        },
                        new
                        {
                            CustomerOrderId = "6fd1233d-5161-45d0-a3dd-ba693974ce17",
                            CustomerUid = "2"
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.Customers", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<string>("AccountTypeId")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Uid");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Uid = "1",
                            City = "Gadsden",
                            Email = "jon@jon.com",
                            FirstName = "Sally",
                            LastName = "Smith",
                            PhoneNumber = "256-490-1245",
                            PostalCode = "35901",
                            State = "Alabama"
                        },
                        new
                        {
                            Uid = "2",
                            City = "Birmingham",
                            Email = "jondoe@email.com",
                            FirstName = "Jon",
                            LastName = "Doe",
                            PhoneNumber = "256-555-5555",
                            PostalCode = "35203",
                            State = "Alabama"
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.OrderItems", b =>
                {
                    b.Property<string>("OrderItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("OrdersId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductsProductId")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("OrderItemsId");

                    b.HasIndex("OrdersId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemsId = "d1657f95-d8bc-46d9-ae0d-4229167be1ef",
                            OrdersId = "5d25e23d-8d24-48cd-bdb4-e41add557c06",
                            Quantity = 2,
                            TotalPrice = 45m
                        },
                        new
                        {
                            OrderItemsId = "297b16dc-b034-4ab5-925a-b489edc408d2",
                            OrdersId = "60b16649-6c08-439c-9acd-d7033df1e145",
                            Quantity = 1,
                            TotalPrice = 35m
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.OrderStatus", b =>
                {
                    b.Property<string>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("OrderState")
                        .HasColumnType("integer");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            OrderStatusId = "9ab9a929-4919-4e21-be30-23918f21d22d",
                            OrderState = 0
                        },
                        new
                        {
                            OrderStatusId = "d51bfecc-d1a3-4c19-a5a1-5b419d1d88dd",
                            OrderState = 2
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.Orders", b =>
                {
                    b.Property<string>("OrdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CustomerUid")
                        .HasColumnType("text");

                    b.Property<bool>("IsFullfilled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrderStatusId")
                        .HasColumnType("text");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentId")
                        .HasColumnType("text");

                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SellerId")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("OrdersId");

                    b.HasIndex("CustomerUid");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrdersId = "5d25e23d-8d24-48cd-bdb4-e41add557c06",
                            IsFullfilled = false,
                            OrderDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDate = new DateTime(2025, 3, 15, 1, 53, 34, 971, DateTimeKind.Local).AddTicks(4137),
                            Quantity = 10,
                            TotalPrice = 450m
                        },
                        new
                        {
                            OrdersId = "60b16649-6c08-439c-9acd-d7033df1e145",
                            IsFullfilled = true,
                            OrderDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDate = new DateTime(2025, 3, 15, 1, 53, 34, 971, DateTimeKind.Local).AddTicks(4178),
                            Quantity = 5,
                            TotalPrice = 350m
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.PaymentTypes", b =>
                {
                    b.Property<string>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("TypePayment")
                        .HasColumnType("integer");

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            PaymentTypeId = "a62f90ed-e1f7-4588-9c0b-9e1480234ba8",
                            TypePayment = 4
                        },
                        new
                        {
                            PaymentTypeId = "6a6ce624-06cd-4ce0-98ff-d94d3e927262",
                            TypePayment = 9
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.Payments", b =>
                {
                    b.Property<string>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CustomerUid")
                        .HasColumnType("text");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentTypesPaymentTypeId")
                        .HasColumnType("text");

                    b.Property<string>("SellerId")
                        .HasColumnType("text");

                    b.HasKey("PaymentId");

                    b.HasIndex("CustomerUid");

                    b.HasIndex("PaymentTypesPaymentTypeId");

                    b.HasIndex("SellerId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = "b7e5a1af-677e-48cc-8ff4-d652f9c48fdd",
                            AccountNumber = "1234567890",
                            Amount = 0m,
                            PaymentDate = new DateTime(2025, 3, 15, 6, 53, 34, 971, DateTimeKind.Utc).AddTicks(4216)
                        },
                        new
                        {
                            PaymentId = "2f258a5d-c960-4abd-b97e-763b0247df65",
                            AccountNumber = "0987654321",
                            Amount = 0m,
                            PaymentDate = new DateTime(2025, 3, 15, 6, 53, 34, 971, DateTimeKind.Utc).AddTicks(4218)
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.ProductTypes", b =>
                {
                    b.Property<string>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            ProductTypeId = "6b3549db-038d-4e72-a4be-f550d8ad251f",
                            Description = "Widgets are cool",
                            ImageUrl = "",
                            Name = "Widgets"
                        },
                        new
                        {
                            ProductTypeId = "0be375b0-2eeb-49bc-97a4-29e58cd79364",
                            Description = "Gadgets are cooler",
                            ImageUrl = "",
                            Name = "Gadgets"
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.Products", b =>
                {
                    b.Property<string>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SellerUid")
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = "f7022167-28e2-4edc-b86b-c645a91dbd01",
                            DateAdded = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A widget that does stuff",
                            IsAvailable = false,
                            Name = "Widget",
                            Price = 9.99m,
                            ProductTypeId = 1,
                            Quantity = 100,
                            SellerUid = "1"
                        },
                        new
                        {
                            ProductId = "ff49305c-24ff-45bd-9063-5fd81bc814c1",
                            DateAdded = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A gadget that does stuff",
                            IsAvailable = false,
                            Name = "Gadget",
                            Price = 19.99m,
                            ProductTypeId = 2,
                            Quantity = 50,
                            SellerUid = "2"
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.SellerDashboard", b =>
                {
                    b.Property<string>("SellerDashBoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("SellerId")
                        .HasColumnType("text");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalRevenue")
                        .HasColumnType("numeric");

                    b.HasKey("SellerDashBoardId");

                    b.HasIndex("SellerId");

                    b.ToTable("SellerDashboard");

                    b.HasData(
                        new
                        {
                            SellerDashBoardId = "f3090c5c-2ca0-410a-99c5-ad089674602a",
                            TotalOrders = 2,
                            TotalRevenue = 19.98m
                        },
                        new
                        {
                            SellerDashBoardId = "b2407a2b-6dad-41cb-a0d3-548230121c60",
                            TotalOrders = 1,
                            TotalRevenue = 19.99m
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.SellerOrders", b =>
                {
                    b.Property<string>("SellerOrdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("OrdersId")
                        .HasColumnType("text");

                    b.Property<string>("SellersSellerId")
                        .HasColumnType("text");

                    b.HasKey("SellerOrdersId");

                    b.HasIndex("OrdersId");

                    b.HasIndex("SellersSellerId");

                    b.ToTable("SellersOrders");

                    b.HasData(
                        new
                        {
                            SellerOrdersId = "7cd762b4-1879-409f-b13e-dc299c10fc0d"
                        },
                        new
                        {
                            SellerOrdersId = "90031ceb-5dce-40fd-ba80-704118c67aae"
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.Sellers", b =>
                {
                    b.Property<string>("SellerId")
                        .HasColumnType("text");

                    b.Property<string>("AccountTypeId")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("SellerId");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Sellers");

                    b.HasData(
                        new
                        {
                            SellerId = "4115e821-1367-450f-a195-dacb5c770524",
                            City = "Decatur",
                            Email = "seller@email.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            PhoneNumber = "555-555-5555",
                            PostalCode = "32323",
                            State = "Georgia"
                        },
                        new
                        {
                            SellerId = "7f55916a-ed1a-4874-98ca-7a9225a5324f",
                            City = "Birmingham",
                            Email = "jsmith@jsmith.com",
                            FirstName = "John",
                            LastName = "Smith",
                            PhoneNumber = "256-555-5555",
                            PostalCode = "35203",
                            State = "Alabama"
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.CustomerOrders", b =>
                {
                    b.HasOne("bangazon_issues.Models.Customers", "Customer")
                        .WithOne("CustomerOrders")
                        .HasForeignKey("bangazon_issues.Models.CustomerOrders", "CustomerUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bangazon_issues.Models.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("OrdersId");

                    b.HasOne("bangazon_issues.Models.Sellers", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Customer");

                    b.Navigation("Orders");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("bangazon_issues.Models.Customers", b =>
                {
                    b.HasOne("bangazon_issues.Models.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId");

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("bangazon_issues.Models.OrderItems", b =>
                {
                    b.HasOne("bangazon_issues.Models.Orders", "Orders")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bangazon_issues.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsProductId");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("bangazon_issues.Models.Orders", b =>
                {
                    b.HasOne("bangazon_issues.Models.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerUid");

                    b.HasOne("bangazon_issues.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("bangazon_issues.Models.Payments", "Payment")
                        .WithOne("Orders")
                        .HasForeignKey("bangazon_issues.Models.Orders", "PaymentId");

                    b.HasOne("bangazon_issues.Models.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("bangazon_issues.Models.Sellers", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");

                    b.Navigation("Payment");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("bangazon_issues.Models.Payments", b =>
                {
                    b.HasOne("bangazon_issues.Models.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerUid");

                    b.HasOne("bangazon_issues.Models.PaymentTypes", "PaymentTypes")
                        .WithMany()
                        .HasForeignKey("PaymentTypesPaymentTypeId");

                    b.HasOne("bangazon_issues.Models.Sellers", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Customer");

                    b.Navigation("PaymentTypes");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("bangazon_issues.Models.SellerDashboard", b =>
                {
                    b.HasOne("bangazon_issues.Models.Sellers", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("bangazon_issues.Models.SellerOrders", b =>
                {
                    b.HasOne("bangazon_issues.Models.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("OrdersId");

                    b.HasOne("bangazon_issues.Models.Sellers", "Sellers")
                        .WithMany()
                        .HasForeignKey("SellersSellerId");

                    b.Navigation("Orders");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("bangazon_issues.Models.Sellers", b =>
                {
                    b.HasOne("bangazon_issues.Models.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId");

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("bangazon_issues.Models.Customers", b =>
                {
                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("bangazon_issues.Models.Orders", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("bangazon_issues.Models.Payments", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace bangazon_issues.Migrations
{
    [DbContext(typeof(BangazonDbContext))]
    [Migration("20250303045347_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("bangazon_issues.Models.AccountType", b =>
                {
                    b.Property<string>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("TypeAcct")
                        .HasColumnType("integer");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountType");

                    b.HasData(
                        new
                        {
                            AccountTypeId = "4a1a5df7-87d9-4803-a78a-3227802dd89c",
                            TypeAcct = 2
                        },
                        new
                        {
                            AccountTypeId = "5338007b-ed9a-4365-802e-3c7750f61a25",
                            TypeAcct = 1
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.CustomerOrders", b =>
                {
                    b.Property<string>("CustomerOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CustomerUid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrdersId")
                        .HasColumnType("text");

                    b.Property<string>("SellerId")
                        .HasColumnType("text");

                    b.HasKey("CustomerOrderId");

                    b.HasIndex("CustomerUid")
                        .IsUnique();

                    b.HasIndex("OrdersId");

                    b.HasIndex("SellerId");

                    b.ToTable("CustomersOrders");

                    b.HasData(
                        new
                        {
                            CustomerOrderId = "1198a6df-c6a8-4c67-9243-637282074d87",
                            CustomerUid = "1"
                        },
                        new
                        {
                            CustomerOrderId = "466a4dab-6b6c-42f8-a833-ea84093e8bc4",
                            CustomerUid = "2"
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.Customers", b =>
                {
                    b.Property<string>("Uid")
                        .HasColumnType("text");

                    b.Property<string>("AccountTypeId")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("Uid");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Uid = "1",
                            City = "Gadsden",
                            Email = "jon@jon.com",
                            FirstName = "Sally",
                            LastName = "Smith",
                            PhoneNumber = "256-490-1245",
                            PostalCode = "35901",
                            State = "Alabama"
                        },
                        new
                        {
                            Uid = "2",
                            City = "Birmingham",
                            Email = "jondoe@email.com",
                            FirstName = "Jon",
                            LastName = "Doe",
                            PhoneNumber = "256-555-5555",
                            PostalCode = "35203",
                            State = "Alabama"
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.OrderItems", b =>
                {
                    b.Property<string>("OrderItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("OrdersId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductsProductId")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("OrderItemsId");

                    b.HasIndex("OrdersId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemsId = "0bf615d6-e000-490e-aaa1-83f93bc9cdc6",
                            OrdersId = "1",
                            Quantity = 2,
                            TotalPrice = 45m
                        },
                        new
                        {
                            OrderItemsId = "950f39d6-613f-45ee-bc5e-0f2206d0e4ff",
                            OrdersId = "2",
                            Quantity = 1,
                            TotalPrice = 35m
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.OrderStatus", b =>
                {
                    b.Property<string>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("OrderState")
                        .HasColumnType("integer");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            OrderStatusId = "2d4ae539-653e-4fef-839d-ca7e8337008a",
                            OrderState = 0
                        },
                        new
                        {
                            OrderStatusId = "2abe1613-aa27-43a4-9594-daf97cd6e3c1",
                            OrderState = 2
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.Orders", b =>
                {
                    b.Property<string>("OrdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("CustomerUid")
                        .HasColumnType("text");

                    b.Property<bool>("IsFullfilled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrderStatusId")
                        .HasColumnType("text");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SellerId")
                        .HasColumnType("text");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("OrdersId");

                    b.HasIndex("CustomerUid");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrdersId = "879ec1ad-e771-413d-9abc-fd4a2e5f3d27",
                            IsFullfilled = false,
                            OrderDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDate = new DateTime(2025, 3, 2, 22, 53, 47, 616, DateTimeKind.Local).AddTicks(1461),
                            Quantity = 10,
                            TotalPrice = 450m
                        },
                        new
                        {
                            OrdersId = "cedfd9e1-e837-4768-bb7c-892a10d09337",
                            IsFullfilled = true,
                            OrderDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentDate = new DateTime(2025, 3, 2, 22, 53, 47, 616, DateTimeKind.Local).AddTicks(1500),
                            Quantity = 5,
                            TotalPrice = 350m
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.PaymentTypes", b =>
                {
                    b.Property<string>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("TypePayment")
                        .HasColumnType("integer");

                    b.HasKey("PaymentTypeId");

                    b.ToTable("PaymentTypes");

                    b.HasData(
                        new
                        {
                            PaymentTypeId = "20b462f5-d798-48c8-bac8-e0484a5a1d5d",
                            TypePayment = 4
                        },
                        new
                        {
                            PaymentTypeId = "6b740303-de38-4663-9f0e-8b81ef75582c",
                            TypePayment = 9
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.Payments", b =>
                {
                    b.Property<string>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("text");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("CustomerUid")
                        .HasColumnType("text");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PaymentTypesPaymentTypeId")
                        .HasColumnType("text");

                    b.Property<string>("SellerId")
                        .HasColumnType("text");

                    b.HasKey("PaymentId");

                    b.HasIndex("CustomerUid");

                    b.HasIndex("PaymentTypesPaymentTypeId");

                    b.HasIndex("SellerId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = "a9faf802-94be-4ef5-bde5-edf0d77e693c",
                            AccountNumber = "1234567890",
                            Amount = 0m,
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            PaymentId = "d467a418-fd2d-440c-a9c0-1dcdfb7132d0",
                            AccountNumber = "0987654321",
                            Amount = 0m,
                            PaymentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.ProductTypes", b =>
                {
                    b.Property<string>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            ProductTypeId = "d9833c74-b778-4653-9aae-5ce7e467ce88",
                            Description = "Widgets are cool",
                            ImageUrl = "",
                            Name = "Widgets"
                        },
                        new
                        {
                            ProductTypeId = "fbd83d1c-3c5f-44ea-8bdf-f95d88f8f20b",
                            Description = "Gadgets are cooler",
                            ImageUrl = "",
                            Name = "Gadgets"
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.Products", b =>
                {
                    b.Property<string>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SellerUid")
                        .HasColumnType("text");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = "fec8f407-8a1c-438d-958f-5093e39f28f8",
                            DateAdded = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A widget that does stuff",
                            IsAvailable = false,
                            Name = "Widget",
                            Price = 9.99m,
                            ProductTypeId = 1,
                            Quantity = 100,
                            SellerUid = "1"
                        },
                        new
                        {
                            ProductId = "6a12075c-7f39-43ba-a264-6c0f9c1288a1",
                            DateAdded = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A gadget that does stuff",
                            IsAvailable = false,
                            Name = "Gadget",
                            Price = 19.99m,
                            ProductTypeId = 2,
                            Quantity = 50,
                            SellerUid = "2"
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.SellerDashboard", b =>
                {
                    b.Property<string>("SellerDashBoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("SellerId")
                        .HasColumnType("text");

                    b.Property<int>("TotalOrders")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalRevenue")
                        .HasColumnType("numeric");

                    b.HasKey("SellerDashBoardId");

                    b.HasIndex("SellerId");

                    b.ToTable("SellerDashboard");

                    b.HasData(
                        new
                        {
                            SellerDashBoardId = "ab53df5f-cce5-4f73-9188-8f300205cec2",
                            TotalOrders = 2,
                            TotalRevenue = 19.98m
                        },
                        new
                        {
                            SellerDashBoardId = "629a2974-8deb-405c-ab83-f8c83cae1f1f",
                            TotalOrders = 1,
                            TotalRevenue = 19.99m
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.SellerOrders", b =>
                {
                    b.Property<string>("SellerOrdersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("OrdersId")
                        .HasColumnType("text");

                    b.Property<string>("SellersSellerId")
                        .HasColumnType("text");

                    b.HasKey("SellerOrdersId");

                    b.HasIndex("OrdersId");

                    b.HasIndex("SellersSellerId");

                    b.ToTable("SellersOrders");

                    b.HasData(
                        new
                        {
                            SellerOrdersId = "3ef8f136-7361-458e-920d-5945cf3f652c"
                        },
                        new
                        {
                            SellerOrdersId = "925d05d3-fd3c-4dfa-9b09-95952e5d0242"
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.Sellers", b =>
                {
                    b.Property<string>("SellerId")
                        .HasColumnType("text");

                    b.Property<string>("AccountTypeId")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.HasKey("SellerId");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Sellers");

                    b.HasData(
                        new
                        {
                            SellerId = "2320613c-d0b8-488a-94c2-34831516b270",
                            City = "Decatur",
                            Email = "seller@email.com",
                            FirstName = "Jane",
                            LastName = "Doe",
                            PhoneNumber = "555-555-5555",
                            PostalCode = "32323",
                            State = "Georgia"
                        },
                        new
                        {
                            SellerId = "e7ec9deb-2c93-4ce1-b52f-8d56076c1f78",
                            City = "Birmingham",
                            Email = "jsmith@jsmith.com",
                            FirstName = "John",
                            LastName = "Smith",
                            PhoneNumber = "256-555-5555",
                            PostalCode = "35203",
                            State = "Alabama"
                        });
                });

            modelBuilder.Entity("bangazon_issues.Models.CustomerOrders", b =>
                {
                    b.HasOne("bangazon_issues.Models.Customers", "Customer")
                        .WithOne("CustomerOrders")
                        .HasForeignKey("bangazon_issues.Models.CustomerOrders", "CustomerUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bangazon_issues.Models.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("OrdersId");

                    b.HasOne("bangazon_issues.Models.Sellers", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Customer");

                    b.Navigation("Orders");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("bangazon_issues.Models.Customers", b =>
                {
                    b.HasOne("bangazon_issues.Models.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId");

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("bangazon_issues.Models.OrderItems", b =>
                {
                    b.HasOne("bangazon_issues.Models.Orders", "Orders")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bangazon_issues.Models.Products", "Products")
                        .WithMany()
                        .HasForeignKey("ProductsProductId");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("bangazon_issues.Models.Orders", b =>
                {
                    b.HasOne("bangazon_issues.Models.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerUid");

                    b.HasOne("bangazon_issues.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("bangazon_issues.Models.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("bangazon_issues.Models.Sellers", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");

                    b.Navigation("Product");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("bangazon_issues.Models.Payments", b =>
                {
                    b.HasOne("bangazon_issues.Models.Customers", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerUid");

                    b.HasOne("bangazon_issues.Models.Orders", "Orders")
                        .WithOne("Payment")
                        .HasForeignKey("bangazon_issues.Models.Payments", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("bangazon_issues.Models.PaymentTypes", "PaymentTypes")
                        .WithMany()
                        .HasForeignKey("PaymentTypesPaymentTypeId");

                    b.HasOne("bangazon_issues.Models.Sellers", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Customer");

                    b.Navigation("Orders");

                    b.Navigation("PaymentTypes");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("bangazon_issues.Models.SellerDashboard", b =>
                {
                    b.HasOne("bangazon_issues.Models.Sellers", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("bangazon_issues.Models.SellerOrders", b =>
                {
                    b.HasOne("bangazon_issues.Models.Orders", "Orders")
                        .WithMany()
                        .HasForeignKey("OrdersId");

                    b.HasOne("bangazon_issues.Models.Sellers", "Sellers")
                        .WithMany()
                        .HasForeignKey("SellersSellerId");

                    b.Navigation("Orders");

                    b.Navigation("Sellers");
                });

            modelBuilder.Entity("bangazon_issues.Models.Sellers", b =>
                {
                    b.HasOne("bangazon_issues.Models.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId");

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("bangazon_issues.Models.Customers", b =>
                {
                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("bangazon_issues.Models.Orders", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payment");
                });
#pragma warning restore 612, 618
        }
    }
}
